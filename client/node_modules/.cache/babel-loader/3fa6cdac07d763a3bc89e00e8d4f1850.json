{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shaun\\\\Projects\\\\memeGen\\\\client\\\\src\\\\containers\\\\SearchContainer.js\";\nimport React, { Component } from 'react';\nimport Meme from '../components/Meme';\nimport Search from '../components/Search';\n\nclass SearchContainer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input1: \"\",\n      input2: \"\",\n      allMemes: [],\n      image: \"https://i.imgflip.com\\/1bij.jpg\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https:/api.imgflip.com/get_memes\").then(response => response.json()).then(response => {\n      const memes = response.data.memes;\n      this.setState({\n        allMemes: memes\n      });\n    });\n  }\n\n  handleChange(e) {\n    const _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    const name = e.target.name;\n    const randNum = Math.floor(Math.random() * this.state.allMemes.length);\n    const img = this.state.allMemes[randNum].url;\n    this.setState({\n      [name]: img\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Search, {\n      data: this.state,\n      handleChange: this.handleChange,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Meme, {\n      data: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SearchContainer;","map":{"version":3,"sources":["C:/Users/Shaun/Projects/memeGen/client/src/containers/SearchContainer.js"],"names":["React","Component","Meme","Search","SearchContainer","constructor","state","input1","input2","allMemes","image","handleChange","bind","handleClick","componentDidMount","fetch","then","response","json","memes","data","setState","e","target","name","value","preventDefault","randNum","Math","floor","random","length","img","url","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,eAAN,SAA8BH,SAA9B,CAAuC;AACnCI,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,MAAM,EAAE,EAFC;AAGTC,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDE,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,KAAK,CAAC,kCAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUC,QAAQ,IAAI;AAAA,YACPE,KADO,GACEF,QAAQ,CAACG,IADX,CACPD,KADO;AAEd,WAAKE,QAAL,CAAc;AACVZ,QAAAA,QAAQ,EAAEU;AADA,OAAd;AAGH,KAPL;AAQH;;AAEDR,EAAAA,YAAY,CAACW,CAAD,EAAG;AAAA,sBACaA,CAAC,CAACC,MADf;AAAA,UACHC,IADG,aACHA,IADG;AAAA,UACGC,KADH,aACGA,KADH;AAEX,SAAKJ,QAAL,CAAc;AACV,OAACG,IAAD,GAAQC;AADE,KAAd;AAGH;;AAEDZ,EAAAA,WAAW,CAACS,CAAD,EAAG;AACVA,IAAAA,CAAC,CAACI,cAAF;AADU,UAEFF,IAFE,GAEOF,CAAC,CAACC,MAFT,CAEFC,IAFE;AAGV,UAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKxB,KAAL,CAAWG,QAAX,CAAoBsB,MAA/C,CAAhB;AACA,UAAMC,GAAG,GAAG,KAAK1B,KAAL,CAAWG,QAAX,CAAoBkB,OAApB,EAA6BM,GAAzC;AACA,SAAKZ,QAAL,CAAc;AACV,OAACG,IAAD,GAAQQ;AADE,KAAd;AAGH;;AAEDE,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,IAAI,EAAE,KAAK5B,KADf;AAEI,MAAA,YAAY,EAAE,KAAKK,YAFvB;AAGI,MAAA,WAAW,EAAE,KAAKE,WAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMI,oBAAC,IAAD;AACI,MAAA,IAAI,EAAE,KAAKP,KADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAYH;;AAtDkC;;AAyDvC,eAAeF,eAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport Meme from '../components/Meme';\r\nimport Search from '../components/Search';\r\n\r\nclass SearchContainer extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input1: \"\",\r\n            input2: \"\",\r\n            allMemes: [],\r\n            image: \"https://i.imgflip.com\\/1bij.jpg\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https:/api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data;\r\n                this.setState({\r\n                    allMemes: memes\r\n                })\r\n            })\r\n    }\r\n\r\n    handleChange(e){\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleClick(e){\r\n        e.preventDefault();\r\n        const { name } = e.target;\r\n        const randNum = Math.floor(Math.random() * this.state.allMemes.length);\r\n        const img = this.state.allMemes[randNum].url;\r\n        this.setState({\r\n            [name]: img\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search\r\n                    data={this.state}\r\n                    handleChange={this.handleChange}\r\n                    handleClick={this.handleClick}\r\n                />\r\n                <Meme\r\n                    data={this.state}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchContainer;"]},"metadata":{},"sourceType":"module"}